if(input$VariableAnalyst=="Kitchen"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsWeeks[[3]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsWeeks[[3]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsWeeks[[3]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsWeeks[[3]][[4]][[1]])
))))}
if(input$VariableAnalyst=="Laundry"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsWeeks[[4]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsWeeks[[4]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsWeeks[[4]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsWeeks[[4]][[4]][[1]])
))))}
if(input$VariableAnalyst=="EWAC"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsWeeks[[5]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsWeeks[[5]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsWeeks[[5]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsWeeks[[5]][[4]][[1]])
))))
}}
})
output$ErrorModel<-renderTable({
if(input$FrequencyAnalyst=="Month"){
if(input$VariableAnalyst=="ActiveEnergy"){
ifelse(input$SelectModel=="Naive",  ListGraphsMonths[[1]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsMonths[[1]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsMonths[[1]][[3]][2],
ifelse(input$SelectModel=="Arima",ListGraphsMonths[[1]][[4]][2]
))))}
else if(input$VariableAnalyst=="ReactiveEnergy"){
ifelse(input$SelectModel=="Naive", ListGraphsMonths[[2]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsMonths[[2]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsMonths[[2]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsMonths[[2]][[4]][2]
))))}
else if(input$VariableAnalyst=="Kitchen"){
ifelse(input$SelectModel=="Naive", ListGraphsMonths[[3]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsMonths[[3]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsMonths[[3]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsMonths[[3]][[4]][2]
))))}
else if(input$VariableAnalyst=="Laundry"){
ifelse(input$SelectModel=="Naive", ListGraphsMonths[[4]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsMonths[[4]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsMonths[[4]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsMonths[[4]][[4]][2]
))))}
else if(input$VariableAnalyst=="EWAC"){
ifelse(input$SelectModel=="Naive", ListGraphsMonths[[5]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsMonths[[5]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsMonths[[5]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsMonths[[5]][[4]][2]
))))}
}
else if(input$FrequencyAnalyst=="Week"){
if(input$VariableAnalyst=="ActiveEnergy"){
ifelse(input$SelectModel=="Naive",  ListGraphsWeeks[[1]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsWeeks[[1]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsWeeks[[1]][[3]][2],
ifelse(input$SelectModel=="Arima",ListGraphsWeeks[[1]][[4]][2]
))))}
else if(input$VariableAnalyst=="ReactiveEnergy"){
ifelse(input$SelectModel=="Naive", ListGraphsWeeks[[2]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsWeeks[[2]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsWeeks[[2]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsWeeks[[2]][[4]][2]
))))}
else if(input$VariableAnalyst=="Kitchen"){
ifelse(input$SelectModel=="Naive", ListGraphsWeeks[[3]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsWeeks[[3]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsWeeks[[3]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsWeeks[[3]][[4]][2]
))))}
else if(input$VariableAnalyst=="Laundry"){
ifelse(input$SelectModel=="Naive", ListGraphsWeeks[[4]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsWeeks[[4]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsWeeks[[4]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsWeeks[[4]][[4]][2]
))))}
else if(input$VariableAnalyst=="EWAC"){
ifelse(input$SelectModel=="Naive", ListGraphsWeeks[[5]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsWeeks[[5]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsWeeks[[5]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsWeeks[[5]][[4]][2]
))))}
}
})
#   output$readme<-renderImage({
#     outfile <- tempfile(fileext = "team.png")
#   })
output$Insights<-renderText({
"Insights"
})
}
shinyApp(ui, server)
names(data)
prices <- read_excel("./data/Electricity_prices.xlsx", sheet="mod")
#### 0. LOAD PACKAGES ####
pacman::p_load(readr,shiny,data.table,bsts,readr,shinydashboard,xts,highcharter)
prices <- read_excel("./data/Electricity_prices.xlsx", sheet="mod")
?read_excel
#### 0. LOAD PACKAGES ####
pacman::p_load(readxl,shiny,data.table,bsts,readr,shinydashboard,xts,highcharter)
prices <- read_excel("./data/Electricity_prices.xlsx", sheet="mod")
prices <- read_excel("./data/Electricity_prices.xlsx")
prices <-data.frame(prices)
View(prices)
data_bydays<-merge(data_bydays, prices,  by=c("Year","Month"))
View(data_bydays)
View(data_bydays)
variables
Data_ByDay<-Data_ts%>%
mutate(ReactiveEnergy=ReactiveEnergy*60)%>%
group_by(Date, Year, Month) %>%
summarise_at(vars(vars), funs(sum, mean))
data_bydays<-data%>%
group_by(Year=year(DateTime), Month=month(DateTime),Week=week(DateTime),Day=day(DateTime)) %>%
summarise_at(vars(vars), funs(sum, mean))
# Group by day, week, month, year
vars<-c("ActiveEnergy", "ReactiveEnergy",
"Kitchen", "Laundry", "EWAC")
data_bydays<-data%>%
group_by(Year=year(DateTime), Month=month(DateTime),Week=week(DateTime),Day=day(DateTime)) %>%
summarise_at(vars(vars), funs(sum, mean))
View(data_bydays)
data_bydays<-data%>%
group_by(Year=year(DateTime), Month=month(DateTime),Week=week(DateTime),Day=day(DateTime)) %>%
summarise_at(vars(vars), funs(sum, mean))%>%
select(Year, Month, ActiveEnergy=ActiveEnergy_sum,
Kitchen=Kitchen_sum, Laundry=Laundry_sum, EWAC=EWAC_sum, OtherRooms=OtherRooms_sum,
ReactiveEnergy=ReactiveEnergy_mean, Voltage=Voltage_mean, Intensity=Intensity_mean) %>%
mutate(Date=ymd(paste(Year, Month, Day)))
data_bydays<-data%>%
group_by(Year=year(DateTime), Month=month(DateTime),Week=week(DateTime),Day=day(DateTime)) %>%
summarise_at(vars(vars), funs(sum, mean)) %>%
select(Year, Month,Week, Day, ActiveEnergy=ActiveEnergy_sum,
Kitchen=Kitchen_sum, Laundry=Laundry_sum, EWAC=EWAC_sum, OtherRooms=OtherRooms_sum,
ReactiveEnergy=ReactiveEnergy_mean, Voltage=Voltage_mean, Intensity=Intensity_mean)
data_bydays<-data%>%
group_by(Year=year(DateTime), Month=month(DateTime),Week=week(DateTime),Day=day(DateTime)) %>%
summarise_at(vars(vars), funs(sum, mean)) %>%
dplyr::select(Year, Month,Week, Day, ActiveEnergy=ActiveEnergy_sum,
Kitchen=Kitchen_sum, Laundry=Laundry_sum, EWAC=EWAC_sum, OtherRooms=OtherRooms_sum,
ReactiveEnergy=ReactiveEnergy_mean, Voltage=Voltage_mean, Intensity=Intensity_mean) %>%
mutate(Date=ymd(paste(Year, Month, Day)))
data_bydays<-data%>%
group_by(Year=year(DateTime), Month=month(DateTime),Week=week(DateTime),Day=day(DateTime)) %>%
summarise_at(vars(vars), funs(sum, mean)) %>%
dplyr::select(Year, Month,Week, Day, ActiveEnergy=ActiveEnergy_sum,
Kitchen=Kitchen_sum, Laundry=Laundry_sum, EWAC=EWAC_sum,
ReactiveEnergy=ReactiveEnergy_mean, Voltage=Voltage_mean, Intensity=Intensity_mean) %>%
mutate(Date=ymd(paste(Year, Month, Day)))
# Group by day, week, month, year
vars<-c("ActiveEnergy", "ReactiveEnergy",
"Kitchen", "Laundry", "EWAC", "Voltage", "Intensity")
data_bydays<-data%>%
group_by(Year=year(DateTime), Month=month(DateTime),Week=week(DateTime),Day=day(DateTime)) %>%
summarise_at(vars(vars), funs(sum, mean)) %>%
dplyr::select(Year, Month,Week, Day, ActiveEnergy=ActiveEnergy_sum,
Kitchen=Kitchen_sum, Laundry=Laundry_sum, EWAC=EWAC_sum,
ReactiveEnergy=ReactiveEnergy_mean, Voltage=Voltage_mean, Intensity=Intensity_mean) %>%
mutate(Date=ymd(paste(Year, Month, Day)))
View(data_bydays)
data_bydays<-merge(data_bydays, prices,  by=c("Year","Month"))
# Create time series
tsYear<-ts(data_byyears[variables],frequency=1, start=2007, end=2010)
tsMonth<-ts(data_bymonths[variables],frequency =  12, start=c(2007,1),  end=c(2010,11))
tsWeek<-ts(data_byweeks[variables], frequency = 52, start=c(2007,1),    end=c(2010,48))
tsDay<-ts(data_bydays[variables], frequency = 356, start=c(2007,1),    end=c(2010,300))
# Create time series
vars<-c("ActiveEnergy", "ReactiveEnergy",
"Kitchen", "Laundry", "EWAC", "Voltage", "Intensity")
# Create time series
vars<-c("ActiveEnergy", "ReactiveEnergy",
"Kitchen", "Laundry", "EWAC", "Voltage", "Intensity", "Price")
tsDay<-ts(data_bydays[vars], frequency = 356, start=c(2007,1),    end=c(2010,300))
#### 2.  USER INTERFACE ####
ui <- dashboardPage(
dashboardHeader(title = "Ubiqum Energy Monitor",
titleWidth=400
),
## Sidebar content
dashboardSidebar(
sidebarMenu(id="menu",
menuItem("Customer Layout", tabName = "customer", icon =icon("bar-chart-o"), startExpanded = FALSE,
dateRangeInput('dateRange',
label = (HTML("<i class='glyphicon glyphicon-calendar'></i> Select Date")),
start = as_date("2007-02-01"), end = as_date("2007-12-31"),
separator = "to",
weekstart = 1),
tags$style(HTML(".datepicker {z-index:99999 !important;}")),
selectInput("Frequency", "Select frequency", choices=c("Year", "Month", "Week", "Day of Week", "Day", "Hour"), selected = "Day"),
selectInput(inputId = "Variable", label = "Variable",choices=c("ActiveEnergy", "ReactiveEnergy", "Kitchen", "Laundry", "EWAC", "OtherRooms")),
menuSubItem("Historic", tabName = "CustBarPlot")
),
menuItem("Analyst Layout", tabName = "analyst", icon =icon("line-chart"), startExpanded = FALSE,
selectInput(inputId ="FrequencyAnalyst", label="Select frequency", choices=c("Year", "Month", "Week", "Day")),
selectInput(inputId = "VariableAnalyst", label = "Variable",choices=c("ActiveEnergy", "ReactiveEnergy", "Kitchen", "Laundry", "EWAC", "OtherRooms")),
menuSubItem("Time Series", tabName = "AnTimeSeries"),
menuSubItem("Time Series All", tabName = "AnTimeSeriesAll"),
menuSubItem("Models", tabName = "AnModels")
),
menuItem("About", tabName = "readme", icon = icon("mortar-board"), selected = FALSE),
menuItem("Insights", tabName = "insights", icon = icon("mortar-board"), selected = FALSE)
)
),
dashboardBody(tabItems(
# First Tab Content
tabItem(tabName = "CustBarPlot",
fluidRow(
box(highchartOutput("table")),
box(highchartOutput("table2"))
),
fluidRow(
infoBoxOutput(width = 3, "BoxReactive"),
infoBoxOutput(width = 3, "BoxVoltage"),
infoBoxOutput(width = 3, "BoxIntensity"),
infoBoxOutput(width = 3, "BoxPrice"))
),
tabItem(tabName = "AnTimeSeries",
box(plotOutput("TimeSeries", height = 500,width = 700 ))),
tabItem(tabName = "AnTimeSeriesAll",
box(plotOutput("TimeSeriesAll", height = 500,width = 700))),
tabItem(tabName = "AnModels",
fluidRow(
box(plotOutput("PlotModels", height = 250)),
box(
title= "SelectModel",
selectInput(inputId = "SelectModel", label = "Select Model",choices=c("Naive", "SNaive", "HoltWinters", "Arima"))
)),
fluidRow(
box(tableOutput("ErrorModel")))
),
tabItem(tabName = "readme",
box(imageOutput("readme"))),
tabItem(tabName = "insights",
box(textOutput("Insights")))
)
)
)
#### 3.  USER INTERFACE ####
server <- function(input, output, session) {
observe({
input1<-input$Frequency
choice1<-if (difftime(input$dateRange[2]+1, input$dateRange[1])==(zoo::as.Date(as.yearmon(input$dateRange[1])+1) - zoo::as.Date(as.yearmon(input$dateRange[1]))))
c("Year", "Month", "Week", "Day of Week", "Day", "Hour") else {
if ((difftime(as_date(input$dateRange[2])+1,as_date(input$dateRange[1])))==day(LastDayInMonth(as_date(input$dateRange[2]))))
c( "Month", "Week", "Day of Week", "Day", "Hour") else {
if ((difftime(as_date(input$dateRange[2])+1,as_date(input$dateRange[1])))== 7)
c("Week", "Day of Week", "Day", "Hour") else {
if((difftime(as_date(input$dateRange[2])+1,as_date(input$dateRange[1])))==1)
c("Day of Week", "Day", "Hour") else c("Day")
}
}
}
updateSelectInput(session,"Frequency",choices=choice1,selected=input1)
})
get.data <- reactive({
switch(input$Frequency,
"Year" = data_byyear,
"Month" = data_bymonths,
"Week" = data_byweeks,
"Day of Week" = Data_ByWDay,
"Day" = data_bydays,
"Hour" = Data_ByHour)
})
get.ts <- reactive({
switch(input$FrequencyAnalyst,
"Year" = tsYear,
"Month" = tsMonth,
"Week" = tsWeek,
"Day" = tsDay)
})
# get.variable <- reactive({
#   switch(input$Variable,
#          "ActiveEnergy" = ActiveEnergy,
#          "ReactiveEnergy" = ReactiveEnergy,
#          "Kitchen" = Kitchen,
#          "Laundry" = Laundry,
#          "EWAC" = EWAC,
#          "OtherRooms" = OtherRooms)
# })
#### filtro el data set (yo le llamo df en la query de dplyr) que tu has creado con el if statement por las fechas de start y end que he seleccionado
#en el calendario
filteredData <- reactive({
get.data() %>% dplyr::filter(Date>=input$dateRange[1] & Date<input$dateRange[2])
})
output$table <- renderHighchart ({
test<-filteredData()
test$ActiveEnergy<-round(test$ActiveEnergy,2)
highchart() %>%
hc_chart(type = "column") %>%
hc_title(text = "Energy consumption (Watt-hour)", align="center") %>%
hc_xAxis(categories = test$Time) %>%
hc_add_series(data = test$ActiveEnergy,
name = "Active Enerhy")%>%
hc_add_series(data = test$Kitchen,
name = "Kitchen")%>%
hc_add_series(data = test$Laundry,
name = "LAundry")%>%
hc_add_series(data = test$EWAC,
name = "Water Heater & A/C")%>%
hc_add_theme(hc_theme_538())
})
output$table2 <- renderHighchart ({
dfts <- xts(round(data_bydays$ActiveEnergy,2), zoo::as.Date( data_bydays$Date, format='%m/%d/%Y'))
hchart(dfts) %>%
hc_title(text = "Energy consumption (Watt-hour)", align="center") %>%
hc_add_theme(hc_theme_538())
})
output$BoxReactive <- renderInfoBox({
ts<-filteredData()
infoBox(
"Reactive", paste0(round(mean(ts$ReactiveEnergy, na.rm = TRUE),2), "Kw"), icon = icon("list"),
color = "purple", fill = TRUE
)
})
output$BoxVoltage <- renderInfoBox({
ts<-filteredData()
infoBox(
"Voltage", paste0(round(mean(ts$Voltage, na.rm = TRUE),2), "Volts"), icon = icon("list"),
color = "maroon", fill = TRUE
)
})
output$BoxIntensity <- renderInfoBox({
ts<-filteredData()
infoBox(
"Intensity", paste0(round(mean(ts$Intensity, na.rm = TRUE),2), "Amps"), icon = icon("list"),
color = "blue", fill = TRUE
)
})
output$BoxPrice <- renderInfoBox({
ts<-filteredData()
infoBox(
"Price", paste0(round(sum((ts$Price * ts$ActiveEnergy)/1000, na.rm = TRUE),2), "Euros"), icon = icon("list"),
color = "green", fill = TRUE
)
})
output$TimeSeries<-renderPlot({
VariableTS<-as.character(input$VariableAnalyst)
# Filter Variables by Year
if(input$FrequencyAnalyst=="Year"){
plot.ts(tsYear[, VariableTS],  ylab = paste0(VariableTS, "(Wh)"), xlab="Per Years")
}
# Filter Variables by Month
if(input$FrequencyAnalyst=="Month"){
plot.ts(tsMonth[, VariableTS],  ylab = paste0(VariableTS, "(Wh)"), xlab="Per Months")
}
# Filter Variables by Week
if(input$FrequencyAnalyst=="Week"){
plot.ts(tsWeek[, VariableTS],  ylab = paste0(VariableTS, "(Wh)"), xlab="Per Weeks")
}
# Filter Variables by Day
if(input$FrequencyAnalyst=="Day"){
plot.ts(tsDay[, VariableTS],  ylab = paste0(VariableTS, "(Wh)"), xlab="Per Days")
}})
output$TimeSeriesAll<-renderPlot({
# Filter Variables by Year
if (input$FrequencyAnalyst=="Year"){
autoplot(tsYear[, c(3,4,5,6,7,8)], facets = FALSE, ylab = "Energy (Wh)", xlab="Years")
}
# Filter Variables by Month
else if(input$FrequencyAnalyst=="Month"){
autoplot(tsMonth[, c(4,5,6,7,8,9)], facets = FALSE, ylab = "Energy (Wh)", xlab="Months")
}
# Filter Variables by Week
else if(input$FrequencyAnalyst=="Week"){
autoplot(tsWeek[, c(4,5,6,7,8,9)], facets = FALSE, ylab = "Energy (Wh)", xlab="Weeks")
}
# Filter Variables by Day
else if(input$FrequencyAnalyst=="Day"){
autoplot(tsDay[, c(5,6,7,8,9,10)], facets = FALSE, ylab = "Energy (Wh)", xlab="Days")
}})
output$PlotModels<-renderPlot({
if(input$FrequencyAnalyst=="Month"){
if(input$VariableAnalyst=="ActiveEnergy"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsMonths[[1]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsMonths[[1]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsMonths[[1]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsMonths[[1]][[4]][[1]])
))))}
if(input$VariableAnalyst=="ReactiveEnergy"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsMonths[[2]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsMonths[[2]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsMonths[[2]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsMonths[[2]][[4]][[1]])
))))}
if(input$VariableAnalyst=="Kitchen"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsMonths[[3]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsMonths[[3]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsMonths[[3]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsMonths[[3]][[4]][[1]])
))))}
if(input$VariableAnalyst=="Laundry"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsMonths[[4]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsMonths[[4]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsMonths[[4]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsMonths[[4]][[4]][[1]])
))))}
if(input$VariableAnalyst=="EWAC"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsMonths[[5]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsMonths[[5]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsMonths[[5]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsMonths[[5]][[4]][[1]])
))))
}}
if (input$FrequencyAnalyst=="Week"){
if(input$VariableAnalyst=="ActiveEnergy"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsWeeks[[1]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsWeeks[[1]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsWeeks[[1]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsWeeks[[1]][[4]][[1]])
))))}
if(input$VariableAnalyst=="ReactiveEnergy"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsWeeks[[2]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsWeeks[[2]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsWeeks[[2]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsWeeks[[2]][[4]][[1]])
))))}
if(input$VariableAnalyst=="Kitchen"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsWeeks[[3]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsWeeks[[3]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsWeeks[[3]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsWeeks[[3]][[4]][[1]])
))))}
if(input$VariableAnalyst=="Laundry"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsWeeks[[4]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsWeeks[[4]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsWeeks[[4]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsWeeks[[4]][[4]][[1]])
))))}
if(input$VariableAnalyst=="EWAC"){
ifelse(input$SelectModel=="Naive",  plot(ListGraphsWeeks[[5]][[1]][[1]]),
ifelse(input$SelectModel== "SNaive",plot(ListGraphsWeeks[[5]][[2]][[1]]),
ifelse(input$SelectModel=="HoltWinters",plot(ListGraphsWeeks[[5]][[3]][[1]]),
ifelse(input$SelectModel=="Arima",plot(ListGraphsWeeks[[5]][[4]][[1]])
))))
}}
})
output$ErrorModel<-renderTable({
if(input$FrequencyAnalyst=="Month"){
if(input$VariableAnalyst=="ActiveEnergy"){
ifelse(input$SelectModel=="Naive",  ListGraphsMonths[[1]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsMonths[[1]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsMonths[[1]][[3]][2],
ifelse(input$SelectModel=="Arima",ListGraphsMonths[[1]][[4]][2]
))))}
else if(input$VariableAnalyst=="ReactiveEnergy"){
ifelse(input$SelectModel=="Naive", ListGraphsMonths[[2]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsMonths[[2]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsMonths[[2]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsMonths[[2]][[4]][2]
))))}
else if(input$VariableAnalyst=="Kitchen"){
ifelse(input$SelectModel=="Naive", ListGraphsMonths[[3]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsMonths[[3]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsMonths[[3]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsMonths[[3]][[4]][2]
))))}
else if(input$VariableAnalyst=="Laundry"){
ifelse(input$SelectModel=="Naive", ListGraphsMonths[[4]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsMonths[[4]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsMonths[[4]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsMonths[[4]][[4]][2]
))))}
else if(input$VariableAnalyst=="EWAC"){
ifelse(input$SelectModel=="Naive", ListGraphsMonths[[5]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsMonths[[5]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsMonths[[5]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsMonths[[5]][[4]][2]
))))}
}
else if(input$FrequencyAnalyst=="Week"){
if(input$VariableAnalyst=="ActiveEnergy"){
ifelse(input$SelectModel=="Naive",  ListGraphsWeeks[[1]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsWeeks[[1]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsWeeks[[1]][[3]][2],
ifelse(input$SelectModel=="Arima",ListGraphsWeeks[[1]][[4]][2]
))))}
else if(input$VariableAnalyst=="ReactiveEnergy"){
ifelse(input$SelectModel=="Naive", ListGraphsWeeks[[2]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsWeeks[[2]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsWeeks[[2]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsWeeks[[2]][[4]][2]
))))}
else if(input$VariableAnalyst=="Kitchen"){
ifelse(input$SelectModel=="Naive", ListGraphsWeeks[[3]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsWeeks[[3]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsWeeks[[3]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsWeeks[[3]][[4]][2]
))))}
else if(input$VariableAnalyst=="Laundry"){
ifelse(input$SelectModel=="Naive", ListGraphsWeeks[[4]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsWeeks[[4]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsWeeks[[4]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsWeeks[[4]][[4]][2]
))))}
else if(input$VariableAnalyst=="EWAC"){
ifelse(input$SelectModel=="Naive", ListGraphsWeeks[[5]][[1]][2],
ifelse(input$SelectModel== "SNaive",ListGraphsWeeks[[5]][[2]][2],
ifelse(input$SelectModel=="HoltWinters",ListGraphsWeeks[[5]][[2]][2],
ifelse(input$SelectModel=="Arima",ListGraphsWeeks[[5]][[4]][2]
))))}
}
})
#   output$readme<-renderImage({
#     outfile <- tempfile(fileext = "team.png")
#   })
output$Insights<-renderText({
"Insights"
})
}
shinyApp(ui, server)
