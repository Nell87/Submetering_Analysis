"EWAC", "OtherRooms")),
selectInput("Select Year",inputId="cust_year", choices=c(2008, 2009, 2010)),
selectInput("Select Month",inputId="cust_month", choices=unique(data_bymonths$Month))
),
menuItem("Analyst Layout", tabName = "analyst", icon =icon("line-chart"),
startExpanded = FALSE,
selectInput(inputId ="FrequencyAnalyst", label="Select frequency",
choices=c("Month", "Week")),
selectInput(inputId = "VariableAnalyst", label = "Variable",
choices=c("ActiveEnergy", "Kitchen", "Laundry", "EWAC")),
menuSubItem("Time Series", tabName = "AnTimeSeries"),
menuSubItem("Time Series All", tabName = "AnTimeSeriesAll"),
menuSubItem("Models", tabName = "AnModels")
)
)
),
dashboardBody(tabItems(
# First Tab Content
tabItem(tabName = "consumption",
fluidRow(
box(plotOutput("customer_plot"))
),
fluidRow(
infoBoxOutput(width = 3, "BoxReactive"),
infoBoxOutput(width = 3, "BoxVoltage"),
infoBoxOutput(width = 3, "BoxIntensity"),
infoBoxOutput(width = 3, "BoxPrice"))
),
tabItem(tabName = "AnTimeSeries",
box(plotOutput("TimeSeries", height = 500,width = 700 ))),
tabItem(tabName = "AnTimeSeriesAll",
box(plotOutput("TimeSeriesAll", height = 500,width = 700))),
tabItem(tabName = "AnModels",
fluidRow(
box(plotOutput("PlotModels", height = 250)),
box(
title= "SelectModel",
selectInput(inputId = "SelectModel", label = "Select Model",choices=c("Naive", "SNaive", "HoltWinters", "Arima"))
)),
fluidRow(
box(tableOutput("ErrorModel")))
),
tabItem(tabName = "readme",
box(imageOutput("readme"))),
tabItem(tabName = "insights",
box(textOutput("Insights")))
)
)
)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% select(Variable=input$Variable, Mo)
})
output$customer_plot<-renderPlot({
hist(3,4,6,7,8,9,3,3,3,3)
})
}
shinyApp(ui, server)
#### 2.  USER INTERFACE ####
ui <- dashboardPage(
dashboardHeader(title = "Energy Monitor",
titleWidth=400
),
## Sidebar content
dashboardSidebar(
sidebarMenu(id="menu",
menuItem("Customer Layout", tabName = "customer", icon =icon("bar-chart-o"),
startExpanded = TRUE,
menuSubItem("consumption", tabName="consumption"),
selectInput(inputId = "cust_var", label = "Variable",
choices=c("ActiveEnergy","Kitchen", "Laundry",
"EWAC", "OtherRooms")),
selectInput("Select Year",inputId="cust_year", choices=c(2008, 2009, 2010)),
selectInput("Select Month",inputId="cust_month", choices=unique(data_bymonths$Month))
),
menuItem("Analyst Layout", tabName = "analyst", icon =icon("line-chart"),
startExpanded = FALSE,
selectInput(inputId ="FrequencyAnalyst", label="Select frequency",
choices=c("Month", "Week")),
selectInput(inputId = "VariableAnalyst", label = "Variable",
choices=c("ActiveEnergy", "Kitchen", "Laundry", "EWAC")),
menuSubItem("Time Series", tabName = "AnTimeSeries"),
menuSubItem("Time Series All", tabName = "AnTimeSeriesAll"),
menuSubItem("Models", tabName = "AnModels")
)
)
),
dashboardBody(tabItems(
# First Tab Content
tabItem(tabName = "consumption",
fluidRow(
box(plotOutput("customer_plot"))
),
fluidRow(
infoBoxOutput(width = 3, "BoxReactive"),
infoBoxOutput(width = 3, "BoxVoltage"),
infoBoxOutput(width = 3, "BoxIntensity"),
infoBoxOutput(width = 3, "BoxPrice"))
),
tabItem(tabName = "AnTimeSeries",
box(plotOutput("TimeSeries", height = 500,width = 700 ))),
tabItem(tabName = "AnTimeSeriesAll",
box(plotOutput("TimeSeriesAll", height = 500,width = 700))),
tabItem(tabName = "AnModels",
fluidRow(
box(plotOutput("PlotModels", height = 250)),
box(
title= "SelectModel",
selectInput(inputId = "SelectModel", label = "Select Model",choices=c("Naive", "SNaive", "HoltWinters", "Arima"))
)),
fluidRow(
box(tableOutput("ErrorModel")))
),
tabItem(tabName = "readme",
box(imageOutput("readme"))),
tabItem(tabName = "insights",
box(textOutput("Insights")))
)
)
)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, Variable=input$cust_var)
})
output$customer_plot<-renderPlot({
hist(data_bydays)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, Variable=input$cust_var)
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(data_bydays$Variable)
})
}
shinyApp(ui, server)
data_bydays %>% filter(Month %in% "January"
data_bydays %>% filter(Month %in% "January")
data_bydays %>% filter(Month %in% "January" & Year %in% 2007)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% "January" & Year %in% 2007) %>%
select(Day, Month, Year, ActiveEnergy)
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(data_bydays$Variable)
})
}
shinyApp(ui, server)
View(data_bydays)
data_bydays %>% filter(Month %in% "January" & Year %in% 2007) %>%
select(Day, Month, Year, ActiveEnergy)
x<-data_bydays %>% filter(Month %in% "January" & Year %in% 2007) %>%
select(Day, Month, Year, ActiveEnergy)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% "January" & Year %in% 2007) %>%
select(Day, Month, Year, ActiveEnergy)
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(data_bydays$ActiveEnergy)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% "January" & Year %in% 2007) %>%
select(Day, Month, Year, Variable=input$cust_var)
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(data_bydays$Variable)
})
}
shinyApp(ui, server)
names(data_bydays)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% "January" & Year %in% 2007) %>%
select(Day, Month, Year, Variable=input$cust_var)
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(data_bydays$Variable)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% "January" & Year %in% 2007) %>%
select(Day, Month, Year, ActiveEnergy)
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(ActiveEnergy)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% "January" & Year %in% 2007) %>%
select(Day, Month, Year, ActiveEnergy)
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(cust_data$ActiveEnergy)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% 2007) %>%
select(Day, Month, Year, ActiveEnergy)
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(cust_data$ActiveEnergy)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, ActiveEnergy)
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(cust_data$ActiveEnergy)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, Variable=as.numeric(input$cust_var))
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(cust_data$Variable)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, Variable=ActiveEnergy)
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(cust_data$Variable)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, constains(as.character(input$cust_var)))
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(cust_data$Variable)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, contains(as.character(input$cust_var)))
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(cust_data$Variable)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, Variable=starts_with(input$cust_var))
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(cust_data$Variable)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
#### 2.  USER INTERFACE ####
ui <- dashboardPage(
dashboardHeader(title = "Energy Monitor",
titleWidth=400
),
## Sidebar content
dashboardSidebar(
sidebarMenu(id="menu",
menuItem("Customer Layout", tabName = "customer", icon =icon("bar-chart-o"),
startExpanded = TRUE,
menuSubItem("consumption", tabName="consumption"),
selectInput(inputId = "cust_var", label = "Variable",
choices=c("ActiveEnergy","Kitchen", "Laundry",
"EWAC")),
selectInput("Select Year",inputId="cust_year", choices=c(2008, 2009, 2010)),
selectInput("Select Month",inputId="cust_month", choices=unique(data_bymonths$Month))
),
menuItem("Analyst Layout", tabName = "analyst", icon =icon("line-chart"),
startExpanded = FALSE,
selectInput(inputId ="FrequencyAnalyst", label="Select frequency",
choices=c("Month", "Week")),
selectInput(inputId = "VariableAnalyst", label = "Variable",
choices=c("ActiveEnergy", "Kitchen", "Laundry", "EWAC")),
menuSubItem("Time Series", tabName = "AnTimeSeries"),
menuSubItem("Time Series All", tabName = "AnTimeSeriesAll"),
menuSubItem("Models", tabName = "AnModels")
)
)
),
dashboardBody(tabItems(
# First Tab Content
tabItem(tabName = "consumption",
fluidRow(
box(plotOutput("customer_plot"))
),
fluidRow(
infoBoxOutput(width = 3, "BoxReactive"),
infoBoxOutput(width = 3, "BoxVoltage"),
infoBoxOutput(width = 3, "BoxIntensity"),
infoBoxOutput(width = 3, "BoxPrice"))
),
tabItem(tabName = "AnTimeSeries",
box(plotOutput("TimeSeries", height = 500,width = 700 ))),
tabItem(tabName = "AnTimeSeriesAll",
box(plotOutput("TimeSeriesAll", height = 500,width = 700))),
tabItem(tabName = "AnModels",
fluidRow(
box(plotOutput("PlotModels", height = 250)),
box(
title= "SelectModel",
selectInput(inputId = "SelectModel", label = "Select Model",choices=c("Naive", "SNaive", "HoltWinters", "Arima"))
)),
fluidRow(
box(tableOutput("ErrorModel")))
),
tabItem(tabName = "readme",
box(imageOutput("readme"))),
tabItem(tabName = "insights",
box(textOutput("Insights")))
)
)
)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, Variable=starts_with(input$cust_var))
})
output$customer_plot<-renderPlot({
cust_data<-cust_data()
hist(cust_data$Variable)
})
}
shinyApp(ui, server)
library(plotly)
#### 2.  USER INTERFACE ####
ui <- dashboardPage(
dashboardHeader(title = "Energy Monitor",
titleWidth=400
),
## Sidebar content
dashboardSidebar(
sidebarMenu(id="menu",
menuItem("Customer Layout", tabName = "customer", icon =icon("bar-chart-o"),
startExpanded = TRUE,
menuSubItem("consumption", tabName="consumption"),
selectInput(inputId = "cust_var", label = "Variable",
choices=c("ActiveEnergy","Kitchen", "Laundry",
"EWAC")),
selectInput("Select Year",inputId="cust_year", choices=c(2008, 2009, 2010)),
selectInput("Select Month",inputId="cust_month", choices=unique(data_bymonths$Month))
),
menuItem("Analyst Layout", tabName = "analyst", icon =icon("line-chart"),
startExpanded = FALSE,
selectInput(inputId ="FrequencyAnalyst", label="Select frequency",
choices=c("Month", "Week")),
selectInput(inputId = "VariableAnalyst", label = "Variable",
choices=c("ActiveEnergy", "Kitchen", "Laundry", "EWAC")),
menuSubItem("Time Series", tabName = "AnTimeSeries"),
menuSubItem("Time Series All", tabName = "AnTimeSeriesAll"),
menuSubItem("Models", tabName = "AnModels")
)
)
),
dashboardBody(tabItems(
# First Tab Content
tabItem(tabName = "consumption",
fluidRow(
box(plotlyOutput("customer_plot"))
),
fluidRow(
infoBoxOutput(width = 3, "BoxReactive"),
infoBoxOutput(width = 3, "BoxVoltage"),
infoBoxOutput(width = 3, "BoxIntensity"),
infoBoxOutput(width = 3, "BoxPrice"))
),
tabItem(tabName = "AnTimeSeries",
box(plotOutput("TimeSeries", height = 500,width = 700 ))),
tabItem(tabName = "AnTimeSeriesAll",
box(plotOutput("TimeSeriesAll", height = 500,width = 700))),
tabItem(tabName = "AnModels",
fluidRow(
box(plotOutput("PlotModels", height = 250)),
box(
title= "SelectModel",
selectInput(inputId = "SelectModel", label = "Select Model",choices=c("Naive", "SNaive", "HoltWinters", "Arima"))
)),
fluidRow(
box(tableOutput("ErrorModel")))
),
tabItem(tabName = "readme",
box(imageOutput("readme"))),
tabItem(tabName = "insights",
box(textOutput("Insights")))
)
)
)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, Variable=starts_with(input$cust_var))
})
output$customer_plot<-renderPlotly({
cust_data<-cust_data()
plot_ly(x=~cust_data$Day, y=~cust_data$Variable)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, Variable=starts_with(input$cust_var))
})
output$customer_plot<-renderPlotly({
cust_data<-cust_data()
plot_ly(x=~cust_data$Day, y=~cust_data$Variable, type="histogram")
})
}
shinyApp(ui, server)
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, Variable=starts_with(input$cust_var))
})
output$customer_plot<-renderPlotly({
cust_data<-cust_data()
plot_ly(x=~cust_data$Day, y=~cust_data$Variable, type="bar")
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, Variable=starts_with(input$cust_var))
})
output$customer_plot<-renderPlotly({
cust_data<-cust_data()
plot_ly(x=~cust_data$Day, y=~cust_data$Variable, type="bar") %>%
layout(xaxis = "Day", yaxis="Patata" )
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Prepare the dataset
cust_data<-reactive({
data_bydays %>% filter(Month %in% input$cust_month & Year %in% input$cust_year) %>%
select(Day, Month, Year, Variable=starts_with(input$cust_var))
})
output$customer_plot<-renderPlotly({
cust_data<-cust_data()
plot_ly(x=~cust_data$Day, y=~cust_data$Variable, type="bar") %>%
layout(title = "Total consumption",
xaxis = list(title = as.character(input$cust_var)),
yaxis = list(title = "Day"))
})
}
shinyApp(ui, server)
